const target = { a: 1, b: 2 };
const source = { b: 4, c: 5 };

const returnedTarget = Object.assign(target, source);

console.log(target);
// Expected output: Object { a: 1, b: 4, c: 5 }

console.log(returnedTarget === target);
// Expected output: true


https://www.freecodecamp.org/news/the-javascript-promises-handbook/
readFile(sourceFile)
  .then(data => processData(data))
  .then(result => writeFile(result, outputFile))
  .then(() => console.log('done'))
  .catch(error => console.error('error:', error));

function getUsers() {
  return fetch('https://example.com/api/users')
    .then(result => result.json())
    .catch(error => {
      console.error('Error loading users:', error);
      return Promise.reject(error);
    });
}  
            fetch('https://example.com/api/users', {
                method: "POST",
                body: JSON.stringify({email:email.value,msg:msg.value}),
                headers: {"Content-type": "application/json; charset=UTF-8"}
            })
            
            const fd = new FormData();
            fd.append('email', email.value);
            fd.append('msg', msg.value);

            fetch('https://lab-project-01.azurewebsites.net/api/express/skills-contact', {
                method: "POST",
                body: fd
            })

async function add(a, b) {
  return a + b;   
}

add(2, 3).then(sum => {
   console.log('Sum is:', sum); 
});

try {
    const data = await readFile(sourceFile);
    const result = await processData(data);
    await writeFile(result, outputFile);
} catch (error) {
    console.error('Error occurred while processing:', error);
}

const users = await Promise.all([getUser(1), getUser(2), getUser(3)]);